---
title: "lab1"
author: "Gabriel Lau, Mirza Anaqi, Ryan Ong, Abdul Halim, Elroy Lian, Frederick Ang"
format: html
editor: visual
---

# Introduction

```{r}
#| label: required-packages
#| message: false

library(tidyverse)
```

# Aggregating information about flights

## Unzip Data and Import all Extracted CSV Files

```{r}
# unzip the data
unzip("nycflights13_data.zip")

# import csv
airlines <- read_csv("airlines.csv")
airports <- read_csv("airports.csv")
flights <- read_csv("flights.csv")
planes <- read_csv("planes.csv")
weather <- read_csv("weather.csv")
```

# 2.3

```{r}
#Which ten destination airports are served by the greatest number of seats from New York City? If airports are tied for the tenth place, ensure that all tied airports are included in the output. Include columns for the following attributes in exactly this order:

#Three-letter airport code
#Airport name
#Number of seats
#Rank. The destination with most seats is ranked first.
#Sort the results first by rank and, then, alphabetically by the three-letter airport code.

# selecting the columns needed
destination_copy <- flights %>% select(dest, tailnum)
planes_copy <- planes %>% select(tailnum, seats)
airports_copy <- airports %>% select(faa, name)

# join destination with planes to get the number of seats column
destination_copy <- left_join(destination_copy, planes, by = "tailnum")

# total number of seats for each destination
destination_copy <- destination_copy %>% group_by(dest) %>% summarise(total_seats = sum(seats))

# join destination with airports to get the airport name
destination_copy <- left_join(destination_copy, airports, by = c("dest" = "faa"))

# rank the destinations by the number of seats
destination_copy <- destination_copy %>% arrange(desc(total_seats)) %>% mutate(rank = row_number())

# select the top 10 destinations
destination_copy <- destination_copy %>% filter(rank <= 10)

# select the columns needed
destination_copy <- destination_copy %>% select(dest, name, total_seats, rank)

# rename the columns
destination_copy <- destination_copy %>% rename("Three-letter airport code" = dest, "Airport name" = name, "Number of seats" = total_seats, "Rank" = rank)

destination_copy

```
# 2.6
```{r}
# What percentage of flights that experienced a departure delay of at least 30 minutes still managed to arrive on time? Remove flights with unknown departure or arrival delays from the analysis. Provide the answer as a single-element numeric vector. Confirm that the answer has the correct length and class.

percentage_vector <- flights %>%
  filter(!is.na(dep_delay), !is.na(arr_delay)) %>%
  mutate(on_time = ifelse(arr_delay <= 0, 1, 0)) %>%
  group_by(dep_delay >= 30) %>%
  summarise(percentage = mean(on_time))
```
=======
# 2.5 Rankings of New York Cityâ€™s Main Airports by Mean Departure Delay
```{r}
# Filter flights with known departure delays
filtered_flights <- flights %>% filter(!is.na(dep_delay))

# Calculate mean departure delay for each airport
airport_delays <- filtered_flights %>% group_by(origin) %>% summarise(mean_dep_delay = mean(dep_delay))

# Rank airports by mean departure delay
ranked_airports <- airport_delays %>% mutate(rank = rank(mean_dep_delay)) %>% arrange(rank, origin)

# Merge with airports data to get airport names
ranked_airports <- ranked_airports %>% left_join(airports, by = c("origin" = "faa")) %>% select(origin, name, mean_dep_delay, rank) %>% arrange(rank, origin)

# Display the ranked airports
print(ranked_airports)
```

# 2.7

```{r}
# Tabulate the percentage of on-time departures for each hour of the day when the plane is scheduled to leave. Remove flights with unknown departure delays from the analysis. Include columns for the following attributes in exactly this order:
# 
# Hour of the day
# Percentage of on-time departures
# Sort the results by the hour of the day. Display all hours in the output.

# select the columns needed
flights <- flights %>% select(hour, dep_delay)

# remove flights with unknown departure delays
flights <- flights %>% filter(!is.na(dep_delay))

# calculate the percentage of on-time departures for each hour of the day
flights <- flights %>% mutate(on_time = ifelse(dep_delay <= 0, 1, 0)) %>% group_by(hour) %>% summarise(percentage_on_time = mean(on_time) * 100)

flights
```
# 3.2

## Filter airports with timezone America/New_York
```{r}
# Which airlines operated flights from New York City to Chicago? Include columns for the following attributes in exactly this order:
# 
# Two-letter airline code
# Airline name
# Number of flights
# Rank. The airline operating most flights is ranked first.
# Sort the results first by rank and, then, alphabetically by the two-letter airline code.
nyc_airports <- airports %>%
  filter(tzone == "America/New_York") %>%
  pull(faa)
```

## Filter airports with timezone Chicago
```{r}
chicago_airports <- airports %>%
  filter(tzone == "America/Chicago") %>%
  pull(faa)
```

## Filter flights from New York City to Chicago and Rank Them
```{r}
flights %>%
  filter(origin %in% nyc_airports, dest %in% chicago_airports) %>%
  group_by(carrier) %>%
  summarise(number_of_flights = n()) %>%
  arrange(desc(number_of_flights), carrier) %>%
  left_join(airlines, by = c("carrier" = "carrier")) %>%
  select(carrier, name, number_of_flights) %>%
  mutate(rank = row_number())
```

# 4.1
```{r}
# How many unique combinations of origin airport and time_hour are present in flights.csv but absent from weather.csv? Provide your answer in the form of a single-element numeric vector. Confirm that the answer has the correct length and class.

flights %>%
  select(origin, time_hour) %>%
  distinct() %>%
  anti_join(weather, by = c("origin", "time_hour")) %>%
  nrow()
```

# 3.1 Identify Chicago Airports

```{r}
# Filter airports with names containing "Chicago"
chicago_airports <- airports %>%
  filter(str_detect(name, "Chicago"))

# Select only the faa and name columns
chicago_airports <- select(chicago_airports, faa, name)

# Display the content of chicago_airports
print(chicago_airports)
```

# 3.6 Were There Daily Departures in October?

```{r}
# Filter flights from New York City to Chicago in October 2013
october_flights <- flights %>%
  filter(origin %in% c("JFK", "LGA", "EWR") & dest %in% c("ORD", "MDW") &
           year == 2013 & month == 10)

# Check if there were any daily departures
daily_departures <- october_flights %>%
  group_by(year, month, day) %>%
  summarise(departures = n_distinct(flight))

# Check if at least one departure was scheduled every day in October
at_least_one_daily_departure <- all(daily_departures$departures > 0)
length_check <- length(at_least_one_daily_departure) == 1
class_check <- class(at_least_one_daily_departure) == "logical"

# Display the result
print(daily_departures)
print(at_least_one_daily_departure)
print(length_check)
print(class_check)
```