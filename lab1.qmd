---
title: "lab1"
author: "Gabriel Lau, Mirza Anaqi, Ryan Ong, Abdul Halim, Elroy Lian, Frederick Ang"
format: html
editor: visual
---

# Introduction

```{r}
#| label: required-packages
#| message: false

library(tidyverse)
```

# Aggregating information about flights

## 2.1
## Unzip Data and Import all Extracted CSV Files

```{r}
# unzip the data
unzip("nycflights13_data.zip")

# import csv
airlines <- read_csv("airlines.csv")
airports <- read_csv("airports.csv")
flights <- read_csv("flights.csv")
planes <- read_csv("planes.csv")
weather <- read_csv("weather.csv")
```

## 2.2
## Rankings of New York City’s Main Airports by Number of Destinations Served

```{r}
# What are the rankings of New York City’s main airports in terms of the number of destinations served? Include columns for the following attributes in exactly this order: Three-letter airport code, Airport name, Number of destinations, Rank. The busiest airport is ranked first. Sort the results first by rank and, then, alphabetically by the three-letter airport code.
flights |>
  group_by(dest) |>
  summarise(n = n()) |>
  left_join(airports, by = c("dest" = "faa")) |>
  select(dest, name, n) |>
  mutate(rank = rank(desc(n))) |>
  arrange(rank, dest) |>
  rename("Three-letter airport code" = dest, "Airport name" = name, "Number of destinations" = n, Rank = rank)
```

## 2.3
## Top Ten Destination Airports by Seats

```{r}
#Which ten destination airports are served by the greatest number of seats from New York City? If airports are tied for the tenth place, ensure that all tied airports are included in the output. Include columns for the following attributes in exactly this order:

#Three-letter airport code
#Airport name
#Number of seats
#Rank. The destination with most seats is ranked first.
#Sort the results first by rank and, then, alphabetically by the three-letter airport code.

flights |>
  inner_join(planes, by = "tailnum") |>
  group_by(dest) |>
  summarise(total_seats = sum(seats)) |>
  inner_join(airports, by = c("dest" = "faa")) |>
  mutate(rank = rank(desc(total_seats))) |>
  arrange(rank, dest) |>
  select(dest, name, total_seats, rank) |>
  rename("Three-letter airport code" = dest, "Airport name" = name, "Number of seats" = total_seats, Rank = rank)
  

```

## 2.4
## Top Ten Destination Airports Served by Flights from Each New York City Airport

```{r}
#| message: false

flights |> 
  count(origin, dest, name = "flights_count") |> 
  group_by(origin) |> 
  mutate(
    min_rank = min_rank(flights_count)
  ) |> 
  slice_min(order_by = min_rank, n = 10) |> 
  inner_join(airports, by = c("origin" = "faa")) |> 
  select(origin, "origin_name" = name, dest, min_rank, flights_count)  |>
  inner_join(airports, by = c("dest" = "faa")) |> 
  select(origin, origin_name, dest, "dest_name" = name, min_rank, flights_count)
```

## 2.5
## Rankings of New York City’s Main Airports by Mean Departure Delay

```{r}
# Filter flights with known departure delays
filtered_flights <- flights %>% filter(!is.na(dep_delay))

# Calculate mean departure delay for each airport
airport_delays <- filtered_flights %>% group_by(origin) %>% summarise(mean_dep_delay = mean(dep_delay))

# Rank airports by mean departure delay
ranked_airports <- airport_delays %>% mutate(rank = rank(mean_dep_delay)) %>% arrange(rank, origin)

# Merge with airports data to get airport names
ranked_airports <- ranked_airports %>% left_join(airports, by = c("origin" = "faa")) %>% select(origin, name, mean_dep_delay, rank) %>% arrange(rank, origin)

# Display the ranked airports
print(ranked_airports)
```

## 2.6
## Percentage of On-Time Flights Despite Departure Delay

```{r}
# What percentage of flights that experienced a departure delay of at least 30 minutes still managed to arrive on time? Remove flights with unknown departure or arrival delays from the analysis. Provide the answer as a single-element numeric vector. Confirm that the answer has the correct length and class.

percentage_vector <- flights %>%
  filter(!is.na(dep_delay), !is.na(arr_delay)) %>%
  mutate(on_time = ifelse(arr_delay <= 0, 1, 0)) %>%
  group_by(dep_delay >= 30) %>%
  summarise(percentage = mean(on_time))
```

## 2.7
## On-Time Departure Percentage by Hour of the Day

```{r}
# Tabulate the percentage of on-time departures for each hour of the day when the plane is scheduled to leave. Remove flights with unknown departure delays from the analysis. Include columns for the following attributes in exactly this order:
# 
# Hour of the day
# Percentage of on-time departures
# Sort the results by the hour of the day. Display all hours in the output.

flights |>
  filter(!is.na(dep_delay)) |>
  mutate(on_time = ifelse(dep_delay <= 0, 1, 0)) |>
  group_by(hour) |>
  summarise(percentage_on_time = mean(on_time) * 100) |>
  arrange(hour) |>
  rename("Hour of the day" = hour, "Percentage of on-time departures" = percentage_on_time)
```

## 2.8
## Planes Operated by Multiple Airlines

```{r}
#| message: false

flights |>
  count(tailnum, carrier, name = "airline_count") |>
  inner_join(planes, by = "tailnum") |>
  select(tailnum, manufacturer, model, airline_count) |>
  filter(airline_count > 0)
```

## 3.1
## Identify Chicago Airports

```{r}
# Filter airports with names containing "Chicago"
chicago_airports <- airports %>%
  filter(str_detect(name, "Chicago"))

# Select only the faa and name columns
chicago_airports <- select(chicago_airports, faa, name)

# Display the content of chicago_airports
print(chicago_airports)
```

## 3.2
## Airlines Serving Chicago from New York City
### Filter airports with timezone America/New_York

```{r}
# Which airlines operated flights from New York City to Chicago? Include columns for the following attributes in exactly this order:
# 
# Two-letter airline code
# Airline name
# Number of flights
# Rank. The airline operating most flights is ranked first.
# Sort the results first by rank and, then, alphabetically by the two-letter airline code.
nyc_airports <- airports %>%
  filter(tzone == "America/New_York") %>%
  pull(faa)
```

### Filter airports with timezone Chicago

```{r}
chicago_airports <- airports %>%
  filter(tzone == "America/Chicago") %>%
  pull(faa)
```

### Filter flights from New York City to Chicago and Rank Them

```{r}
flights %>%
  filter(origin %in% nyc_airports, dest %in% chicago_airports) %>%
  group_by(carrier) %>%
  summarise(number_of_flights = n()) %>%
  arrange(desc(number_of_flights), carrier) %>%
  left_join(airlines, by = c("carrier" = "carrier")) %>%
  select(carrier, name, number_of_flights) %>%
  mutate(rank = row_number())
```

## 3.4
## Top Ten Models by Frequency

```{r}
# What were the ten most frequent combinations of manufacturer and model used for flights from New York City to Chicago? If manufacturer-model combinations are tied for the tenth place, incorporate all of them in the output. Include columns for the following attributes in exactly this order:
# 
# Manufacturer
# Model
# Number of flights
# Rank
# Sort the results first by rank, then alphabetically by manufacturer, and, lastly, by model.

flights |>
  inner_join(planes, by = "tailnum") |>
  filter(origin %in% nyc_airports, dest %in% chicago_airports) |>
  group_by(manufacturer, model) %>% summarise(number_of_flights = n()) |>
  mutate(rank = rank(desc(number_of_flights))) |>
  arrange(rank, manufacturer, model) |>
  slice_min(order_by = rank, n = 10) |>
  rename("Manufacturer" = manufacturer, "Model" = model, "Number of flights" = number_of_flights, Rank = rank)
```

## 3.6
## Were There Daily Departures in October?

```{r}
# Filter flights from New York City to Chicago in October 2013
october_flights <- flights %>%
  filter(origin %in% c("JFK", "LGA", "EWR") & dest %in% c("ORD", "MDW") &
           year == 2013 & month == 10)

# Check if there were any daily departures
daily_departures <- october_flights %>%
  group_by(year, month, day) %>%
  summarise(departures = n_distinct(flight))

# Check if at least one departure was scheduled every day in October
at_least_one_daily_departure <- all(daily_departures$departures > 0)
length_check <- length(at_least_one_daily_departure) == 1
class_check <- class(at_least_one_daily_departure) == "logical"

# Display the result
print(daily_departures)
print(at_least_one_daily_departure)
print(length_check)
print(class_check)
```

## 4.1
## Airport-Hour Combinations Absent from the Weather Table

```{r}
# How many unique combinations of origin airport and time_hour are present in flights.csv but absent from weather.csv? Provide your answer in the form of a single-element numeric vector. Confirm that the answer has the correct length and class.

flights %>%
  select(origin, time_hour) %>%
  distinct() %>%
  anti_join(weather, by = c("origin", "time_hour")) %>%
  nrow()
```

## 4.2
## On-Time Departures by Airport and Precipitation

```{r}
# What is the percentage of on-time departures from each of New York City’s main airports under dry conditions (i.e., precip = 0) and under wet conditions? Remove flights from the analysis if the delay or precipitation at departure is unknown. Include columns for the following attributes in exactly this order:

# Three-letter airport code
# Airport name
# is_dry: Logical values indicating zero precipitation.
# Percentage of on-time departures

# First, sort the results alphabetically by the three-letter airport code and, then, by the presence of precipitation (with dry conditions appearing before wet ones).

nyc_airports <- airports %>%
  filter(tzone == "America/New_York") %>%
  select(faa, name)

filtered_flight_weather <- weather %>%
  left_join(flights, by = c("origin", "time_hour")) %>%
  filter(!is.na(precip), !is.na(dep_delay)) %>%
  mutate(is_dry = precip == 0, on_time_dep = dep_delay <= 0) %>%
  count(origin, is_dry, on_time_dep, name = "flights_count") %>%
  mutate(perc_flights = (flights_count / sum(flights_count)) * 100, .by = c("origin", "is_dry"))

print(filtered_flight_weather)

# Merge with airports data to get airport names
filtered_departures <- filtered_flight_weather %>%
  filter(on_time_dep) %>%
  left_join(nyc_airports, by = c("origin" = "faa")) %>%
  select(origin, name, is_dry, perc_flights) %>%
  arrange(origin, desc(is_dry))

print(filtered_departures)
```

## 4.3
## Rank Airports by Low-Visibility Departure Delays

```{r}
# How do New York City’s main airports rank in terms of mean departure delay when the visibility was less than one mile? Remove flights with unknown departure delays from the analysis. Include columns for the following attributes in exactly this order:

# Three-letter airport code
# Airport name
# Mean departure delay in minutes
# Rank. The airport with the shortest mean departure delay is ranked first.

# Sort the results first by rank and, then, alphabetically by the three-letter airport code.

nyc_airports <- airports %>%
  filter(tzone == "America/New_York") %>%
  select(faa, name)

filtered_airports <- weather %>%
  left_join(flights, by = c("origin", "time_hour")) %>%
  filter(!is.na(dep_delay), visib < 1) %>%
  summarise(mean_dep_delay = mean(dep_delay), .by = origin) %>%
  mutate(rank = min_rank(mean_dep_delay)) %>%
  left_join(nyc_airports, by = c("origin" = "faa")) %>%
  select(origin, name, mean_dep_delay, rank) %>%
  arrange(rank, origin)

print(filtered_airports)
```

## 4.4
## Correlation between Temperature and Departure Delay

```{r}
# What is the correlation coefficient between the mean temperature of the day and the mean departure delay on that day? Remove flights from the analysis if the temperature or departure delay is unknown. Provide the answer in the form of a single-element numeric vector. Confirm that the answer has the correct length and class.

corr <- flights %>%
  left_join(weather, by = c("origin", "time_hour", "year", "month", "day")) %>%
  filter(!is.na(temp), !is.na(dep_delay)) %>%
  summarize(mean_temp = mean(temp), mean_dep_delay = mean(dep_delay), .by = c(year, month, day)) %>%
  summarize(corr = cor(mean_temp, mean_dep_delay)) %>%
  pull()
  
print(corr)

length(corr) == 1 & is.numeric(corr)
```