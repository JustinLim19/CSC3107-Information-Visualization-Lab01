---
title: "lab1"
author: "Gabriel Lau, Mirza Anaqi, Ryan Ong, Abdul Halim, Elroy Lian, Frederick Ang"
format: html
editor: visual
---
# Introduction

```Your code chunk for loading libraries```
```{r}
#| message: false

library(tidyverse)
library(readr)
library(dplyr)
```

# 2.1

```{r}
# import csv
airlines <- read_csv("nycflights13_data/airlines.csv")
airports <- read_csv("nycflights13_data/airports.csv")
flights <- read_csv("nycflights13_data/flights.csv")
planes <- read_csv("nycflights13_data/planes.csv")
weather <- read_csv("nycflights13_data/weather.csv")
```

# 2.3

```{r}
#Which ten destination airports are served by the greatest number of seats from New York City? If airports are tied for the tenth place, ensure that all tied airports are included in the output. Include columns for the following attributes in exactly this order:

#Three-letter airport code
#Airport name
#Number of seats
#Rank. The destination with most seats is ranked first.
#Sort the results first by rank and, then, alphabetically by the three-letter airport code.

# selecting the columns needed
destination <- flights %>% select(dest, tailnum)
planes <- planes %>% select(tailnum, seats)
airports <- airports %>% select(faa, name)

# join destination with planes to get the number of seats column
destination <- left_join(destination, planes, by = "tailnum")

# total number of seats for each destination
destination <- destination %>% group_by(dest) %>% summarise(total_seats = sum(seats))

# join destination with airports to get the airport name
destination <- left_join(destination, airports, by = c("dest" = "faa"))

# rank the destinations by the number of seats
destination <- destination %>% arrange(desc(total_seats)) %>% mutate(rank = row_number())

# select the top 10 destinations
destination <- destination %>% filter(rank <= 10)

# select the columns needed
destination <- destination %>% select(dest, name, total_seats, rank)

# rename the columns
destination <- destination %>% rename("Three-letter airport code" = dest, "Airport name" = name, "Number of seats" = total_seats, "Rank" = rank)

destination

```
# 2.6
```{r}
# What percentage of flights that experienced a departure delay of at least 30 minutes still managed to arrive on time? Remove flights with unknown departure or arrival delays from the analysis. Provide the answer as a single-element numeric vector. Confirm that the answer has the correct length and class.

percentage_vector <- flights %>%
  filter(!is.na(dep_delay), !is.na(arr_delay)) %>%
  mutate(on_time = ifelse(arr_delay <= 0, 1, 0)) %>%
  group_by(dep_delay >= 30) %>%
  summarise(percentage = mean(on_time))
```
# 2.7

```{r}
# Tabulate the percentage of on-time departures for each hour of the day when the plane is scheduled to leave. Remove flights with unknown departure delays from the analysis. Include columns for the following attributes in exactly this order:
# 
# Hour of the day
# Percentage of on-time departures
# Sort the results by the hour of the day. Display all hours in the output.

# select the columns needed
flights <- flights %>% select(hour, dep_delay)

# remove flights with unknown departure delays
flights <- flights %>% filter(!is.na(dep_delay))

# calculate the percentage of on-time departures for each hour of the day
flights <- flights %>% mutate(on_time = ifelse(dep_delay <= 0, 1, 0)) %>% group_by(hour) %>% summarise(percentage_on_time = mean(on_time) * 100)

flights
```
# 3.2

## Filter airports with timezone America/New_York
```{r}
# Which airlines operated flights from New York City to Chicago? Include columns for the following attributes in exactly this order:
# 
# Two-letter airline code
# Airline name
# Number of flights
# Rank. The airline operating most flights is ranked first.
# Sort the results first by rank and, then, alphabetically by the two-letter airline code.
nyc_airports <- airports %>%
  filter(tzone == "America/New_York") %>%
  pull(faa)
```

## Filter airports with timezone Chicago
```{r}
chicago_airports <- airports %>%
  filter(tzone == "America/Chicago") %>%
  pull(faa)
```

## Filter flights from New York City to Chicago and Rank Them
```{r}
flights %>%
  filter(origin %in% nyc_airports, dest %in% chicago_airports) %>%
  group_by(carrier) %>%
  summarise(number_of_flights = n()) %>%
  arrange(desc(number_of_flights), carrier) %>%
  left_join(airlines, by = c("carrier" = "carrier")) %>%
  select(carrier, name, number_of_flights) %>%
  mutate(rank = row_number())
```

# 4.1
```{r}
# How many unique combinations of origin airport and time_hour are present in flights.csv but absent from weather.csv? Provide your answer in the form of a single-element numeric vector. Confirm that the answer has the correct length and class.

flights %>%
  select(origin, time_hour) %>%
  distinct() %>%
  anti_join(weather, by = c("origin", "time_hour")) %>%
  nrow()
```